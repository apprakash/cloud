// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Resturants",
    columns: [
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "email", type: "email" },
      { name: "phoneNumber", type: "int" },
    ],
    revLinks: [
      { column: "Resturant_id", table: "Category" },
      { column: "restaurant_id", table: "Users" },
      { column: "Resturant_id", table: "RefundReasons" },
      { column: "resturant_id", table: "Subscriptions" },
      { column: "resturant_id", table: "Products" },
      { column: "Res_id", table: "Employees" },
      { column: "resturant_id", table: "AdjustmentReasons" },
      { column: "resturant_id", table: "PaymentTypes" },
      { column: "resturant_id", table: "OptionSet" },
      { column: "resturant_id", table: "TableAreas" },
      { column: "resturant_id", table: "Tables" },
      { column: "Resturant_id", table: "Customers" },
      { column: "resturant_id", table: "OptionsSetItems" },
      { column: "Resturant_id", table: "Orders" },
      { column: "resturant_id", table: "Siteinformations" },
      { column: "resturant_id", table: "ReportingGroups" },
      { column: "resturant_id", table: "Printers" },
      { column: "resturant_id", table: "OrderMetaDatas" },
      { column: "Resturant_id", table: "PaymentDevices" },
      { column: "resturant_id", table: "OrderType" },
    ],
  },
  {
    name: "Category",
    columns: [
      { name: "Name", type: "string" },
      { name: "Resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "Category_status", type: "json" },
    ],
  },
  {
    name: "Users",
    columns: [
      { name: "first_name", type: "string" },
      { name: "last_name", type: "string" },
      { name: "email", type: "email" },
      { name: "pin", type: "int" },
      { name: "restaurant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "RefundReasons",
    columns: [
      { name: "Name", type: "string" },
      { name: "Resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "Subscriptions",
    columns: [
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "module", type: "string" },
      { name: "license_no", type: "string" },
    ],
  },
  {
    name: "Employees",
    columns: [
      { name: "Name", type: "string" },
      { name: "Pin", type: "int" },
      { name: "Role", type: "string" },
      { name: "Res_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "Products",
    columns: [
      { name: "name", type: "string" },
      { name: "price", type: "float" },
      { name: "categories", type: "multiple" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "optionsets", type: "multiple" },
      {
        name: "reporting_group_id",
        type: "link",
        link: { table: "ReportingGroups" },
      },
      { name: "measured", type: "string" },
      { name: "variable_price_prompt", type: "bool", defaultValue: "false" },
      { name: "min_sale_price", type: "float" },
      { name: "max_sale_price", type: "float" },
      { name: "color", type: "string" },
      { name: "description", type: "text" },
      { name: "product_image_url", type: "string" },
      { name: "Product_status", type: "json" },
    ],
  },
  {
    name: "AdjustmentReasons",
    columns: [
      { name: "name", type: "string" },
      { name: "amount", type: "string" },
      { name: "permission", type: "bool", defaultValue: "false" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "PaymentTypes",
    columns: [
      { name: "name", type: "string" },
      { name: "show_on_checkout", type: "bool", defaultValue: "false" },
      { name: "require_customer", type: "bool", defaultValue: "false" },
      { name: "prompt_for_adjustment", type: "bool", defaultValue: "false" },
      { name: "color", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "OptionSet",
    columns: [
      { name: "name", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
    revLinks: [{ column: "optionset_id", table: "OptionsSetItems" }],
  },
  {
    name: "TableAreas",
    columns: [
      { name: "name", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
    revLinks: [{ column: "tablearea_id", table: "Tables" }],
  },
  {
    name: "Tables",
    columns: [
      { name: "name", type: "string" },
      { name: "tablearea_id", type: "link", link: { table: "TableAreas" } },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "Customers",
    columns: [
      { name: "Name", type: "string" },
      { name: "Phone", type: "string" },
      { name: "Address", type: "string" },
      { name: "Resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "OptionsSetItems",
    columns: [
      { name: "name", type: "string" },
      { name: "price", type: "float" },
      { name: "optionset_id", type: "link", link: { table: "OptionSet" } },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "Orders",
    columns: [
      { name: "Order_type", type: "string" },
      { name: "Token_number", type: "string" },
      { name: "Resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "Table_number", type: "string" },
      { name: "order_status", type: "string" },
      { name: "order_date", type: "datetime" },
      { name: "CartItems", type: "json" },
      { name: "Employee_Name", type: "string" },
      { name: "order_start_time", type: "datetime" },
      { name: "BillDetails", type: "json" },
      { name: "TransactionData", type: "json" },
      { name: "Notes", type: "text" },
      { name: "kitchen_status", type: "string" },
      { name: "payment_status", type: "string", defaultValue: "Not Paid" },
    ],
  },
  {
    name: "Siteinformations",
    columns: [
      { name: "site_name", type: "string" },
      { name: "abn_number", type: "string" },
      { name: "phone_number", type: "float" },
      { name: "email", type: "string" },
      { name: "business_type", type: "string" },
      { name: "street_address", type: "string" },
      { name: "city", type: "string" },
      { name: "state", type: "string" },
      { name: "postcode", type: "string" },
      { name: "country", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "ReportingGroups",
    columns: [
      { name: "name", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
    revLinks: [{ column: "reporting_group_id", table: "Products" }],
  },
  {
    name: "Printers",
    columns: [
      { name: "name", type: "string" },
      { name: "ip_address", type: "string" },
      { name: "status", type: "bool", defaultValue: "false" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "categories", type: "string" },
      { name: "products", type: "string" },
      { name: "category", type: "multiple" },
      { name: "product", type: "multiple" },
    ],
  },
  {
    name: "OrderMetaDatas",
    columns: [
      { name: "key", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "value", type: "json" },
    ],
  },
  {
    name: "PaymentDevices",
    columns: [
      { name: "username", type: "string" },
      { name: "password", type: "string" },
      { name: "paircode", type: "string" },
      { name: "secret", type: "string" },
      { name: "token", type: "string" },
      { name: "Resturant_id", type: "link", link: { table: "Resturants" } },
      { name: "is_default", type: "bool", defaultValue: "false" },
    ],
  },
  {
    name: "OrderType",
    columns: [
      { name: "name", type: "string" },
      { name: "resturant_id", type: "link", link: { table: "Resturants" } },
    ],
  },
  {
    name: "ConnectedAccounts",
    columns: [{ name: "Connected_AccountId", type: "string" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Resturants = InferredTypes["Resturants"];
export type ResturantsRecord = Resturants & XataRecord;

export type Category = InferredTypes["Category"];
export type CategoryRecord = Category & XataRecord;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type RefundReasons = InferredTypes["RefundReasons"];
export type RefundReasonsRecord = RefundReasons & XataRecord;

export type Subscriptions = InferredTypes["Subscriptions"];
export type SubscriptionsRecord = Subscriptions & XataRecord;

export type Employees = InferredTypes["Employees"];
export type EmployeesRecord = Employees & XataRecord;

export type Products = InferredTypes["Products"];
export type ProductsRecord = Products & XataRecord;

export type AdjustmentReasons = InferredTypes["AdjustmentReasons"];
export type AdjustmentReasonsRecord = AdjustmentReasons & XataRecord;

export type PaymentTypes = InferredTypes["PaymentTypes"];
export type PaymentTypesRecord = PaymentTypes & XataRecord;

export type OptionSet = InferredTypes["OptionSet"];
export type OptionSetRecord = OptionSet & XataRecord;

export type TableAreas = InferredTypes["TableAreas"];
export type TableAreasRecord = TableAreas & XataRecord;

export type Tables = InferredTypes["Tables"];
export type TablesRecord = Tables & XataRecord;

export type Customers = InferredTypes["Customers"];
export type CustomersRecord = Customers & XataRecord;

export type OptionsSetItems = InferredTypes["OptionsSetItems"];
export type OptionsSetItemsRecord = OptionsSetItems & XataRecord;

export type Orders = InferredTypes["Orders"];
export type OrdersRecord = Orders & XataRecord;

export type Siteinformations = InferredTypes["Siteinformations"];
export type SiteinformationsRecord = Siteinformations & XataRecord;

export type ReportingGroups = InferredTypes["ReportingGroups"];
export type ReportingGroupsRecord = ReportingGroups & XataRecord;

export type Printers = InferredTypes["Printers"];
export type PrintersRecord = Printers & XataRecord;

export type OrderMetaDatas = InferredTypes["OrderMetaDatas"];
export type OrderMetaDatasRecord = OrderMetaDatas & XataRecord;

export type PaymentDevices = InferredTypes["PaymentDevices"];
export type PaymentDevicesRecord = PaymentDevices & XataRecord;

export type OrderType = InferredTypes["OrderType"];
export type OrderTypeRecord = OrderType & XataRecord;

export type ConnectedAccounts = InferredTypes["ConnectedAccounts"];
export type ConnectedAccountsRecord = ConnectedAccounts & XataRecord;

export type DatabaseSchema = {
  Resturants: ResturantsRecord;
  Category: CategoryRecord;
  Users: UsersRecord;
  RefundReasons: RefundReasonsRecord;
  Subscriptions: SubscriptionsRecord;
  Employees: EmployeesRecord;
  Products: ProductsRecord;
  AdjustmentReasons: AdjustmentReasonsRecord;
  PaymentTypes: PaymentTypesRecord;
  OptionSet: OptionSetRecord;
  TableAreas: TableAreasRecord;
  Tables: TablesRecord;
  Customers: CustomersRecord;
  OptionsSetItems: OptionsSetItemsRecord;
  Orders: OrdersRecord;
  Siteinformations: SiteinformationsRecord;
  ReportingGroups: ReportingGroupsRecord;
  Printers: PrintersRecord;
  OrderMetaDatas: OrderMetaDatasRecord;
  PaymentDevices: PaymentDevicesRecord;
  OrderType: OrderTypeRecord;
  ConnectedAccounts: ConnectedAccountsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://satish-s-workspace-6midd6.ap-southeast-2.xata.sh/db/pos",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
